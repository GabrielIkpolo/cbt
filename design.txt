===============================
# Design
==============================

#Libraries Installed in React
=============================

 react-hook-form     // form validator
 react-timer-countdown
 @rpldy/uploady    // file uploader
 react-router-dom
 react-hot-toast

axios

 #Libraries Installed for Nodejs
 ==============================

 cors  
 bcrypt
 jsonwebtoken
 node-cron
 multer
 express
 nodemon
 prisma  // already installed globally
 @prisma/client
fast-csv
morgan
slugify
express-formidable
bson-objectid
email-validator


=============
=========================
# Prsima CTB design
=========================
datasource db {
  provider = "mongodb"
  url      = env("DATABASE_URL")
}

generator client {
  provider = "prisma-client-js"
}

model Question {
  id            String   @id @default(auto()) @map("_id") @db.ObjectId
  text          String
  options       Json
  correctAnswer String
  image         String?
  createdAt     DateTime @default(now())
  exam          Exam     @relation(fields: [examId], references: [id])
  examId        String   @db.ObjectId
}

model Exam {
  id              String           @id @default(auto()) @map("_id") @db.ObjectId
  questions       Question[]
  durationMinutes Int
  subject         String
  examResults     ExamResult[]
  examsInProgress ExamInProgress[]
}

model Student {
  id                 String       @id @default(auto()) @map("_id") @db.ObjectId
  name               String
  registrationNumber String       @unique
  department         String
  examsTaken         ExamResult[]
  createdAt          DateTime     @default(now())
}

model ExamResult {
  id        String   @id @default(auto()) @map("_id") @db.ObjectId
  student   Student  @relation(fields: [studentId], references: [id])
  exam      Exam     @relation(fields: [examId], references: [id])
  score     Int
  createdAt DateTime @default(now())
  status    String
  studentId String   @db.ObjectId
  examId    String   @db.ObjectId
}

model Candidate {
  id                 String           @id @default(auto()) @map("_id") @db.ObjectId
  name               String
  registrationNumber String           @unique
  department         String
  examsInProgress    ExamInProgress[]
}

model ExamInProgress {
  id                   String    @id @default(auto()) @map("_id") @db.ObjectId
  candidate            Candidate @relation(fields: [candidateId], references: [id])
  exam                 Exam      @relation(fields: [examId], references: [id])
  candidateId          String    @db.ObjectId
  examId               String    @db.ObjectId
  currentQuestionIndex Int
  startTime            DateTime  @default(now())
  endTime              DateTime?
}

model User {
  id                 String       @id @default(auto()) @map("_id") @db.ObjectId
  name               String
  email              String       @unique
  password           String
  registrationNumber String?      @unique
  department         String?
  role               Int          @default(0)
  createdAt          DateTime     @default(now())
}







